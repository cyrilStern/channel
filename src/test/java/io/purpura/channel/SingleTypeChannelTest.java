package io.purpura.channel;
// Generated by CodiumAI

import io.purpura.channel.channel.SingleTypeChannel;
import io.purpura.channel.message.Message;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class SingleTypeChannelTest {


    // can send a message to the channel and notify subscribers
    @Test
    public void test_send_message_and_notify_subscribers() {
        SingleTypeChannel<String> channel = new SingleTypeChannel<>();
        TestSubscriber<String> subscriber = new TestSubscriber<>();
        channel.subscribe(subscriber);

        Message<String> message = new TestMessage("Hello");
        channel.send(message);

        assertTrue(subscriber.isInformed());
    }

    // can add a subscriber to the channel
    @Test
    public void test_add_subscriber() {
        SingleTypeChannel<String> channel = new SingleTypeChannel<>();
        TestSubscriber<String> subscriber = new TestSubscriber<>();

        assertTrue(channel.subscribe(subscriber));
    }

    // can clear the channel
    @Test
    public void test_clear_channel() {
        SingleTypeChannel<String> channel = new SingleTypeChannel<>();
        TestSubscriber<String> subscriber = new TestSubscriber<>();
        channel.subscribe(subscriber);

        channel.clear();

        assertFalse(subscriber.isInformed());
    }

    // cannot send a null message to the channel
    @Test
    public void test_send_null_message() {
        SingleTypeChannel<String> channel = new SingleTypeChannel<>();
        TestSubscriber<String> subscriber = new TestSubscriber<>();
        channel.subscribe(subscriber);

        Message<String> message = null;
        assertThrows(NullPointerException.class, () -> {
            channel.send(message);
        });
    }

    // cannot add a null subscriber to the channel
    @Test
    public void test_add_null_subscriber() {
        SingleTypeChannel<String> channel = new SingleTypeChannel<>();
        TestSubscriber<String> subscriber = new TestSubscriber<>();
        channel.subscribe(subscriber);
        assertThrows(IllegalStateException.class, () -> {
            channel.subscribe(subscriber);
        });
    }

}
